# -*- coding: utf-8 -*-
"""finpro forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NuZDVEiHcwYc2o8acgpb18y96TXITIHf

#Data understanding

## üìä Walmart Store Sales Forecasting - Data Description

Dataset ini berisi informasi mingguan mengenai penjualan di berbagai toko Walmart di Amerika Serikat. Tujuannya adalah untuk memprediksi penjualan mingguan berdasarkan berbagai faktor eksternal dan internal seperti promosi, musim liburan, suhu, dan lainnya.

---

## üóÉÔ∏è Dataset Fields

### üè¨ Store Info
- **Store**: Nomor unik untuk setiap toko.
- **Type**: Jenis toko (A, B, atau C).
- **Size**: Luas toko dalam satuan kaki persegi.

### üìÖ Weekly Sales Data
- **Date**: Tanggal minggu penjualan (format: YYYY-MM-DD). Akan dikonversi ke tipe datetime.
- **Weekly_Sales**: Penjualan mingguan untuk setiap departemen pada toko tertentu.
- **IsHoliday**: Boolean (True/False), menunjukkan apakah minggu tersebut merupakan minggu liburan khusus (seperti Thanksgiving, Super Bowl, dll).

### ‚ùÑÔ∏è Kondisi Lingkungan
- **Temperature**: Suhu rata-rata mingguan di wilayah toko.
- **Fuel_Price**: Harga rata-rata bahan bakar di wilayah toko.
- **CPI**: Indeks Harga Konsumen (Consumer Price Index).
- **Unemployment**: Tingkat pengangguran di wilayah toko.

### üì¢ Promosi
- **MarkDown1 - MarkDown5**: Variabel anonim yang menunjukkan data potongan harga/promosi yang dilakukan Walmart.  
  - Nilai hanya tersedia setelah November 2011.  
  - Tidak tersedia untuk semua toko dan waktu.  
  - Nilai yang tidak tersedia ditandai sebagai `NA`.

### üõí Department Info
- **Dept**: Nomor unik untuk setiap departemen (misalnya Grocery, Electronics, Clothing, dll).
"""

#Import semua library yang dibutuhkan
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import TimeSeriesSplit, cross_val_score
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score,mean_absolute_percentage_error
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
import plotly.express as px

#load dataset
df1 = pd.read_csv('train.csv')
df2 = pd.read_csv('stores.csv')
df3 = pd.read_csv('features.csv')

#melihat dataset yang di laod
df1.head()

#melihat dataset yang di laod
df2.head()

#melihat dataset yang di laod
df3.head()

#menggabungkan ketiga dataset agar menjadi satu dataset yang lengkap
df = pd.merge(df1, df2, on='Store')
df = pd.merge(df, df3, on=['Store', 'Date', 'IsHoliday'])

#melihat hasil merge
df

#melihat informasi terkait dataset
df.info()

"""#EDA"""

#merubah format tanggal menjadi datetime dan menambahkan kolom month dan year
df['Date'] = pd.to_datetime(df['Date'], format = '%Y-%m-%d')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

#melihat missing value atau nilai kosong
df.isnull().sum()

"""tidak ada missing value, nilai NA pada markdown adalah pada bulan atau minggu itu tidak adanya dilakukan diskon sehingga bisa diartikan bahwa nilainya 0"""

#menggnati nilai kosong menjadi 0 pada kolom markdown
df['MarkDown1'] = df['MarkDown1'].fillna(0)
df['MarkDown2'] = df['MarkDown2'].fillna(0)
df['MarkDown3'] = df['MarkDown3'].fillna(0)
df['MarkDown4'] = df['MarkDown4'].fillna(0)
df['MarkDown5'] = df['MarkDown5'].fillna(0)

#melihat apakah ada nilai duplikat
df.duplicated().sum()

#mengecek persebaran dari kolom target
sns.histplot(df['Weekly_Sales'], kde=True)
plt.title("Distribusi Penjualan Mingguan")

#melihat penjualan dari waktu ke waktu
df.groupby('Date')['Weekly_Sales'].sum().plot(figsize=(15,5))

#penjualan dari waktu ke waktu berdasarkan store
plt.figure(figsize=(20,50))
for store, df_store in df.groupby('Store'):
    data=df_store.groupby('Date')['Weekly_Sales'].sum()
    plt.subplot(15,3,int(store))
    data.plot()
    plt.title(store)
    plt.xlabel(None)

plt.show()

#melihat apakah hari libur mempengaruhi penjualan
holiday_sales = df.groupby('IsHoliday')['Weekly_Sales'].mean()
print(holiday_sales)
plt.bar(holiday_sales.index, holiday_sales.values)
plt.xlabel('IsHoliday')
plt.ylabel('Average Weekly Sales')
plt.title('Average Weekly Sales by Holiday')
plt.show()

#melihat persebaran type toko
count = df['Type'].value_counts()
plt.pie(count, labels=count.index, autopct='%1.1f%%')
plt.title('Distribution of Store Types')
plt.legend()
plt.show()

#melihat toko mana yang memiliki penjualan tertinggi ke terendah
df.groupby('Store')['Weekly_Sales'].sum().sort_values(ascending=False).plot(kind='bar', figsize=(10,5))

"""#Feature engineering"""

#menambahkan kolom lagging
df = df.sort_values(by=['Store', 'Dept', 'Date'])
df['Lag_1'] = df.groupby(['Store', 'Dept'])['Weekly_Sales'].shift(1)
df['Lag_2'] = df.groupby(['Store', 'Dept'])['Weekly_Sales'].shift(2)
df.head()

#mengisi missing value kolom lagging menjadi 0
df['Lag_1'] = df['Lag_1'].fillna(0)
df['Lag_2'] = df['Lag_2'].fillna(0)

#melihat bagaimana korelasi antar kolom
num_col = ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5', 'Lag_1', 'Lag_2','Size','Store','Dept','Weekly_Sales']
correlation_matrix = df[num_col].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

#drop kolom target
x = df.drop(columns=['Weekly_Sales'])
y = df['Weekly_Sales']

#split data menjadi 80:20
x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)

#mengelompokkan kolom numerik
num_to_scale = ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5', 'Lag_1', 'Lag_2','Size','Store','Dept']
scaler = StandardScaler()

# menstandarisasi kolom numerik pada x
x_train[num_to_scale] = scaler.fit_transform(x_train[num_to_scale])
x_val[num_to_scale] = scaler.transform(x_val[num_to_scale])

# # menstandarisasi kolom numerik pada y
y_train = scaler.fit_transform(y_train.values.reshape(-1, 1))
y_val = scaler.transform(y_val.values.reshape(-1, 1))

#melakukan OHE pada kolom kategorikal
cat_to_scale = ['IsHoliday','Type']
x_train = pd.get_dummies(x_train, columns=cat_to_scale)
x_val = pd.get_dummies(x_val, columns=cat_to_scale)

#drop kolom tanggal
x_train = x_train.drop(columns='Date')
x_val = x_val.drop(columns='Date')

"""#Model
- Linear Regression<br>
- Random Forest<br>
- XGBoost <br>
"""

#model linear regression
lin_reg = LinearRegression()
tscv = TimeSeriesSplit(n_splits=5)
lin_reg.fit(x_train, y_train)


y_pred = lin_reg.predict(x_val)

lr_mae = mean_absolute_error(y_val, y_pred)
lr_rmse = np.sqrt(mean_squared_error(y_val, y_pred))
lr_r2 = r2_score(y_val, y_pred)
lr_mape = mean_absolute_percentage_error(y_val, y_pred)

print(f"MAE:   {lr_mae:.2f}")
print(f'MAPE: {lr_mape:.2f}')
print(f"RMSE:  {lr_rmse:.2f}")
print(f"R¬≤:    {lr_r2:.4f}")

#Model XGB Regresor
xgb_reg = XGBRegressor(random_state=42)
xgb_reg.fit(x_train, y_train)

y_pred = xgb_reg.predict(x_val)

xgb_mae = mean_absolute_error(y_val, y_pred)
xgb_rmse = np.sqrt(mean_squared_error(y_val, y_pred))
xgb_r2 = r2_score(y_val, y_pred)
xgb_mape = mean_absolute_percentage_error(y_val, y_pred)

print(f"MAE:   {xgb_mae:.2f}")
print(f'MAPE: {xgb_mape:.2f}')
print(f"RMSE:  {xgb_rmse:.2f}")
print(f"R¬≤:    {xgb_r2:.4f}")

#Model Random Forest Regressor
rf_reg = RandomForestRegressor(n_estimators=50,random_state=42)
rf_reg.fit(x_train, y_train.ravel())

y_pred = rf_reg.predict(x_val)

rf_mae = mean_absolute_error(y_val, y_pred)
rf_rmse = np.sqrt(mean_squared_error(y_val, y_pred))
rf_r2 = r2_score(y_val, y_pred)
rf_mape = mean_absolute_percentage_error(y_val, y_pred)

print(f"MAE:   {rf_mae:.2f}")
print(f'MAPE: {rf_mape:.2f}')
print(f"RMSE:  {rf_rmse:.2f}")
print(f"R¬≤:    {rf_r2:.4f}")

#scatter plot antara prediksi dan data aktual
plt.scatter(y_val, y_pred)
plt.title("Actual vs Predicted")
plt.xlabel("Actual")
plt.ylabel("Predicted")

#plot time series natara aktual dan prediksi
plt.figure(figsize=(14, 6))
plt.plot(y_val, label='Actual', marker='o')
plt.plot(xgb_reg.predict(x_val), label='Predicted', marker='x')
plt.title("Actual vs Predicted Sales")
plt.xlabel("Data Point")
plt.ylabel("Weekly Sales")
plt.legend()
plt.grid()
plt.show()

"""##Time series forecasting (ARIMA & SARIMA)"""

#mencopy data asli ke data train
train = df.copy()

#membuat data yang akan digunakan untuk prediksi timeseries
store = 1
department = 1

sales_data = train[(train['Store'] == store) & (train['Dept'] == department)]['Weekly_Sales']
sales_data = sales_data.sort_index()

#Model TImeSeries ARIMA
train_data = sales_data[:-12]
y_val = sales_data[-12:]

model = ARIMA(train_data, order= (1, 1, 1))
model_fit = model.fit()


forecast = model_fit.forecast(steps=12)

arima_mae = mean_absolute_error(y_val[:12], forecast)
arima_rmse = np.sqrt(mean_squared_error(y_val[:12], forecast))
arima_r2 = r2_score(y_val[:12], forecast)
arima_mape = mean_absolute_percentage_error(y_val[:12], forecast)

print(f"MAE:   {arima_mae:.2f}")
print(f'MAPE: {arima_mape:.2f}')
print(f"RMSE:  {arima_rmse:.2f}")
print(f"R¬≤:    {arima_r2:.4f}")

#melihat hasil prediksi dan aktual dari model ARIMA
plt.plot(y_val.index, y_val.values, label="Actual")
plt.plot(y_val.index, forecast, label="Forecast")
plt.legend()
plt.title("Forecast vs Actual")
plt.grid()
plt.show()

#Model TimeSeriess SARIMA
model = SARIMAX(train_data,
                order=(1,1,1),
                seasonal_order=(1,1,1,52))
model_fit = model.fit()
forecasts = model_fit.forecast(steps=12)

sarima_mae = mean_absolute_error(y_val[:12], forecasts)
sarima_rmse = np.sqrt(mean_squared_error(y_val[:12], forecasts))
sarima_r2 = r2_score(y_val[:12], forecasts)
sarima_mape = mean_absolute_percentage_error(y_val[:12], forecasts)

print(f"MAE:   {sarima_mae:.2f}")
print(f'MAPE: {sarima_mape:.2f}')
print(f"RMSE:  {sarima_rmse:.2f}")
print(f"R¬≤:    {sarima_r2:.4f}")

#melihat hasil prediksi dan aktual dari model SARIMA
plt.plot(y_val.index, y_val.values, label='Actual')
plt.plot(y_val.index, forecasts, label='Forecast')
plt.legend()
plt.grid()
plt.title("SARIMA Forecast vs Actual")
plt.show()

#menampilkan hasil dari prediksi dan aktual secara keseluruhan
plt.figure(figsize=(12, 6))

plt.plot(sales_data.index, sales_data.values, label='Historical Sales')

forecast.index = y_val.index

plt.plot(forecast.index, forecast, label='Forecasted Sales', color='orange')

plt.title(f"Sales Forecast for Store {store} and Department {department}")
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()